[
["section-introduction.html", "FEV1 Prediction Model for COPD 1 Introduction", " FEV1 Prediction Model for COPD Ainsleigh Hill University of British Columbia 1 Introduction The purpose of this package is to predict future FEV1 lung function scores based on current inputs, such as height, weight, FEV1 score, etc. It might be helpful to take a look at the FEV1 web application before reading further, as this gives a visualization of the package: FEV1 Web Application. "],
["section-thestudy.html", "2 The Study 2.1 Background 2.2 The Study Population 2.3 Study Group Divisions 2.4 Data Collection", " 2 The Study The fev1 package and application are based on the paper Individualized prediction of lung-function decline in chronic obstructive pulmonary disease, published in 2016. 2.1 Background Chronic Obstructive Pulmonary Disease (COPD) affects 300 million people worldwide. One of the primary clinical tests used to assess a patient’s lung function is the FEV1 score. FEV1 stands for “Forced Expiration Volume in 1 second,” and is measured by a device called a spirometer. Forced expiration is basically exhaling forcefully into the spirometer, so FEV1 is measuring how much (volume in Litres) air a patient exhales in 1 second. Generally, a higher FEV1 score means better lung function. 2.2 The Study Population The data for this study was taken from the Lung Health Study. Number of Participants: 5887 Type of Study: Multicentre Clinical Randomized Criteria: Ages 35 - 60 Mild to Moderate COPD No other respiratory illnesses High risk for COPD Current smoker 2.3 Study Group Divisions Each of the 5887 patients was randomly assigned to one of three groups: Group 1: Usual Care Number of Participants: 1962 Treatment: None. This group only received usual care, no interventions. Group Type: Behaviour Control, Inhaler Control Group 2: Smoking Intervention and Placebo Inhaler Number of Participants: 1962 Treatment: Behavioural treatment designed to help patients quit smoking Regular placebo inhaler use Group Type: Behaviour Active, Inhaler Control Group 3: Smoking Intervention and Bronchodilator Inhaler Number of Participants: 1963 Treatment: Behavioural treatment designed to help patients quit smoking Regular bronchodilator inhaler use Group Type: Behaviour Active, Inhaler Active 2.4 Data Collection Primary Metric FEV1 Score (L) The primary metric used in this study was FEV1 score. As FEV1 score is a good measure of lung function, we used it as the primary metric to measure the effectiveness of the treatment options. Frequency of FEV1 score measurement: 1 time per year Number of Years: 5 years Secondary Metrics Weight (kg) Height (m) Smoking History (pack-years) Age (years) Gender (male or female) Methacholine Responsiveness (O-Connor Slope) Patient weight in kilograms. Patient height in metres. For smoking history, we used the metric pack-years. One pack is 20 cigarettes, and one pack-year is equal to smoking 1 pack/day for 1 year. Number of pack-years = (packs smoked per day) × (years as a smoker) Patient age at the beginning of the study. For the purpose of this study, we only looked at \"Male\" and \"Female\" genders. Methacholine is a bronchoconstrictor, meaning that it causes the airways in the lungs to close up. The Methacholine Challenge is a test used to measure hyperreactivity: how easy is it for the airways to close? To complete the test, a doctor will give a patient different doses of methacholine, starting at a low dose and increasing up to 2 mg. After each dose, the doctor will measure the FEV1 score to test the lung function. y: (Final FEV1 Score - Initial FEV1 Score)/ Initial FEV1 Score x: Final cumulative dose of methacholine (add all the doses) O'Connor Slope = y / x For more reading: Bronchial Challenge Test Describes O'Connor Slope "],
["section-packageinR.html", "3 Using the Package in R 3.1 Installation 3.2 FEV1 Prediction Function 3.3 FEV1 Projection Models", " 3 Using the Package in R 3.1 Installation If you do not have R installed on your computer, please go to Appendix 1. Once you have R installed, you can install this package in the R console: install.packages(&quot;fev1&quot;) 3.2 FEV1 Prediction Function 3.2.1 Example To get started, there is an R data frame with the package of sample patient data: library(fev1) samplePatients #&gt; # A tibble: 2 x 11 #&gt; ID male age smoking fev1_0 height weight tio int_effect oco #&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 10001 1 70 1 2.5 1.68 65 No 0 -12 #&gt; 2 10002 0 42 0 3.6 1.82 84 Yes 0 -12 #&gt; # … with 1 more variable: fev1_prev &lt;dbl&gt; To get a prediction: results = predictFEV1(samplePatients) head(results) #&gt; Year FEV1 variance FEV1_lower FEV1_upper Scenario #&gt; 1 0 2.500000 0.00000000 2.500000 2.500000 Smoking #&gt; 2 1 2.386493 0.01558353 2.141818 2.631167 Smoking #&gt; 3 2 2.319171 0.01812348 2.055309 2.583033 Smoking #&gt; 4 3 2.250969 0.02218849 1.959012 2.542927 Smoking #&gt; 5 4 2.181888 0.02777856 1.855216 2.508559 Smoking #&gt; 6 5 2.111926 0.03489370 1.745801 2.478051 Smoking ROxygen2 Details Title Predict FEV1 Description Predicts COPD exacerbations within the next year patientData patient data matrix, can have one or many patients in it onePatient is there only one patient in the matrix? predictionModel An integer from 1-4; select a prediction model described below Returns FEV1 prediction for smoking and quitting smoking 3.3 FEV1 Projection Models The predictFEV1() function takes a patient data matrix as input, and then sends the data to one of the projection models to get a prediction. Currently, there are 4 projection models, with the main difference between them being the amount of input variables. FEV1 Projection Model 1 Basic Model The function fev1_projection1() is the basic model, taking only baseline FEV1 function, the effect of intervention on lung function, and tiotropium treatment as arguments. #&gt; null device #&gt; 1 Parameter Type Description fev1_0 numeric Baseline FEV1 score (L) int_effect numeric Effect of intervention on lung function (L) tio string is the patient taking tiotropium, ‘Yes’ or ‘No’? patientData = samplePatients[1,] results = fev1_projection1(fev1_0 = patientData$fev1_0, int_effect = patientData$int_effect, tio = patientData$tio)$df chart = projectionChart(results) chart FEV1 Projection Model 2 (Complete Model with O’Conner Slope) The function fev2_projection() is the complete model, including the O’Conner Slope. The arguments are described in the table below. #&gt; null device #&gt; 1 Parameter Type Description fev1_0 numeric Baseline FEV1 score (L) int_effect numeric Effect of intervention on lung function (L) male integer 1 = Male, 0 = Female smoking integer 1 = Smoker, 0 = Non-Smoker age integer Patient age in years weight numeric Patient weight (kg) height numeric Patient height (m) oco numeric O’Conner Slope tio string is the patient taking tiotropium, ‘Yes’ or ‘No’? patientData = samplePatients[1,] results = fev1_projection2(fev1_0 = patientData$fev1_0, int_effect = patientData$int_effect, male = patientData$male, smoking = 1, age = patientData$age, weight = patientData$weight, height = patientData$height, oco = patientData$oco, tio = patientData$tio)$df chart = projectionChart(results) chart FEV1 Projection Model 3 (Complete Model without O’Conner Slope) The function fev2_projection() is the complete model, including the O’Conner Slope. The arguments are described in the table below. Parameter Type Description fev1_0 numeric Baseline FEV1 score (L) int_effect numeric Effect of intervention on lung function (L) male integer 1 = Male, 0 = Female smoking integer 1 = Smoker, 0 = Non-Smoker age integer Patient age in years weight numeric Patient weight (kg) height numeric Patient height (m) tio string is the patient taking tiotropium, ‘Yes’ or ‘No’? patientData = samplePatients[1,] results = fev1_projection3(fev1_0 = patientData$fev1_0, int_effect = patientData$int_effect, male = patientData$male, smoking = patientData$smoking, age = patientData$age, weight = patientData$weight, height = patientData$height) chart = projectionChart(results) chart FEV1 Projection Model 4 (Extended Model) The function fev4_projection() is the extended model, including the O’Conner Slope and FEV1 score from previous year. The arguments are described in the table below. Parameter Type Description fev1_0 numeric Baseline FEV1 score (L) fev1_prev numeric FEV1 score from previous year (L) int_effect numeric Effect of intervention on lung function (L) male integer 1 = Male, 0 = Female smoking integer 1 = Smoker, 0 = Non-Smoker age integer Patient age in years weight numeric Patient weight (kg) height numeric Patient height (m) oco numeric O’Connor Slope tio string is the patient taking tiotropium, ‘Yes’ or ‘No’? patientData = samplePatients[1,] results = fev1_projection4(fev1_0 = patientData$fev1_0, fev1_prev = patientData$fev1_prev, int_effect = patientData$int_effect, male = patientData$male, smoking = patientData$smoking, age = patientData$age, weight = patientData$weight, height = patientData$height, oco = patientData$oco, tio = patientData$tio)$df chart = projectionChart(results) chart "],
["section-using-the-package-as-an-api-prism.html", "4 Using the Package as an API (PRISM) 4.1 R API 4.2 Shell/Bash API 4.3 Python API 4.4 Javascript API", " 4 Using the Package as an API (PRISM) PRISM (Programmable Interface for Simulation/Statistical Models) is a package which provides a user-friendly API interface in R for clinical prediction and decision analytics models hosted on UBC PRISM cloud. For more information, the PRISM package can be found on GitHub at PRISM on GitHub. 4.1 R API To install PRISM in R, you will need to install it from GitHub. In an R Console: devtools::install_github(&quot;resplab/prism&quot;) To use PRISM in R: library(prism) connect_to_model(&quot;fev1Prism&quot;, api_key = your_api_key) #&gt; Current model is fev1Prism #&gt; call is http://prism.resp.core.ubc.ca/ocpu/library/fev1Prism/R/gateway/json #&gt; Warning in is.na(x): is.na() applied to non-(list or vector) of type &#39;NULL&#39; #&gt; Warning in is.na(x): is.na() applied to non-(list or vector) of type &#39;NULL&#39; #&gt; Warning in is.na(x): is.na() applied to non-(list or vector) of type &#39;NULL&#39; #&gt; Warning in is.na(x): is.na() applied to non-(list or vector) of type &#39;NULL&#39; #&gt; This is fev1Prism - PRISM enabled! #&gt; $error_code #&gt; [1] 0 #&gt; #&gt; $session_id #&gt; [1] &quot;&quot; #&gt; #&gt; $version #&gt; [1] &quot;0.2.1&quot; #&gt; #&gt; $description #&gt; [1] &quot;This is fev1Prism - PRISM enabled!&quot; patient1 &lt;- fev1::samplePatients[1,] model_run(patient1) #&gt; Current model is fev1Prism #&gt; call is http://prism.resp.core.ubc.ca/ocpu/library/fev1Prism/R/gateway/json #&gt; $Year #&gt; [1] 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 0 1 2 3 4 5 6 #&gt; [24] 7 8 9 10 11 12 13 14 15 #&gt; #&gt; $FEV1 #&gt; [1] 2.5000 2.3865 2.3192 2.2510 2.1819 2.1119 2.0411 1.9694 1.8968 1.8233 #&gt; [11] 1.7489 1.6737 1.5976 1.5206 1.4427 1.3639 2.5000 2.5167 2.4749 2.4322 #&gt; [21] 2.3886 2.3442 2.2988 2.2526 2.2056 2.1576 2.1088 2.0590 2.0084 1.9570 #&gt; [31] 1.9046 1.8513 #&gt; #&gt; $variance #&gt; [1] 0.0000 0.0156 0.0181 0.0222 0.0278 0.0349 0.0435 0.0537 0.0654 0.0786 #&gt; [11] 0.0933 0.1096 0.1274 0.1467 0.1676 0.1899 0.0000 0.0156 0.0181 0.0222 #&gt; [21] 0.0278 0.0349 0.0435 0.0537 0.0654 0.0786 0.0933 0.1096 0.1274 0.1467 #&gt; [31] 0.1676 0.1899 #&gt; #&gt; $FEV1_lower #&gt; [1] 2.5000 2.1418 2.0553 1.9590 1.8552 1.7458 1.6321 1.5152 1.3956 1.2738 #&gt; [11] 1.1501 1.0248 0.8980 0.7698 0.6404 0.5097 2.5000 2.2720 2.2110 2.1402 #&gt; [21] 2.0619 1.9780 1.8899 1.7985 1.7044 1.6081 1.5099 1.4101 1.3088 1.2062 #&gt; [31] 1.1023 0.9972 #&gt; #&gt; $FEV1_upper #&gt; [1] 2.5000 2.6312 2.5830 2.5429 2.5086 2.4781 2.4500 2.4236 2.3980 2.3728 #&gt; [11] 2.3477 2.3226 2.2971 2.2713 2.2450 2.2181 2.5000 2.7613 2.7387 2.7241 #&gt; [21] 2.7153 2.7103 2.7078 2.7068 2.7068 2.7071 2.7076 2.7079 2.7080 2.7077 #&gt; [31] 2.7069 2.7055 #&gt; #&gt; $Scenario #&gt; [1] &quot;Smoking&quot; &quot;Smoking&quot; &quot;Smoking&quot; &quot;Smoking&quot; #&gt; [5] &quot;Smoking&quot; &quot;Smoking&quot; &quot;Smoking&quot; &quot;Smoking&quot; #&gt; [9] &quot;Smoking&quot; &quot;Smoking&quot; &quot;Smoking&quot; &quot;Smoking&quot; #&gt; [13] &quot;Smoking&quot; &quot;Smoking&quot; &quot;Smoking&quot; &quot;Smoking&quot; #&gt; [17] &quot;QuitsSmoking&quot; &quot;QuitsSmoking&quot; &quot;QuitsSmoking&quot; &quot;QuitsSmoking&quot; #&gt; [21] &quot;QuitsSmoking&quot; &quot;QuitsSmoking&quot; &quot;QuitsSmoking&quot; &quot;QuitsSmoking&quot; #&gt; [25] &quot;QuitsSmoking&quot; &quot;QuitsSmoking&quot; &quot;QuitsSmoking&quot; &quot;QuitsSmoking&quot; #&gt; [29] &quot;QuitsSmoking&quot; &quot;QuitsSmoking&quot; &quot;QuitsSmoking&quot; &quot;QuitsSmoking&quot; res &lt;- as.data.frame(model_run(patient1)) #&gt; Current model is fev1Prism #&gt; call is http://prism.resp.core.ubc.ca/ocpu/library/fev1Prism/R/gateway/json 4.2 Shell/Bash API 4.2.1 Linux You will need curl installed to use the API. To check if you have curl: dpkg -l curl If you do not have curl, you can install it by: sudo apt install curl curl -X POST -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;api_key&quot;:[&quot;YOUR_API_KEY&quot;],&quot;func&quot;:[&quot;prism_model_run&quot;],&quot;model_input&quot;:[{&quot;ID&quot;:&quot;10001&quot;,&quot;male&quot;:1,&quot;age&quot;:70,&quot;smoker&quot;:1,&quot;FEV1&quot;:2.5,&quot;height&quot;:1.68,&quot;weight&quot;:65}]}&#39; http://prism.resp.core.ubc.ca/ocpu/library/fev1Prism/R/gateway/json #&gt; % Total % Received % Xferd Average Speed Time Time Time Current #&gt; Dload Upload Total Spent Left Speed #&gt; 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 100 1630 0 1486 100 144 2329 225 --:--:-- --:--:-- --:--:-- 2550 100 1630 0 1486 100 144 2329 225 --:--:-- --:--:-- --:--:-- 2550 #&gt; [&quot;{\\&quot;Year\\&quot;:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],\\&quot;FEV1\\&quot;:[2.5,2.3865,2.3192,2.251,2.1819,2.1119,2.0411,1.9694,1.8968,1.8233,1.7489,1.6737,1.5976,1.5206,1.4427,1.3639,2.5,2.5167,2.4749,2.4322,2.3886,2.3442,2.2988,2.2526,2.2056,2.1576,2.1088,2.059,2.0084,1.957,1.9046,1.8513],\\&quot;variance\\&quot;:[0,0.0156,0.0181,0.0222,0.0278,0.0349,0.0435,0.0537,0.0654,0.0786,0.0933,0.1096,0.1274,0.1467,0.1676,0.1899,0,0.0156,0.0181,0.0222,0.0278,0.0349,0.0435,0.0537,0.0654,0.0786,0.0933,0.1096,0.1274,0.1467,0.1676,0.1899],\\&quot;FEV1_lower\\&quot;:[2.5,2.1418,2.0553,1.959,1.8552,1.7458,1.6321,1.5152,1.3956,1.2738,1.1501,1.0248,0.898,0.7698,0.6404,0.5097,2.5,2.272,2.211,2.1402,2.0619,1.978,1.8899,1.7985,1.7044,1.6081,1.5099,1.4101,1.3088,1.2062,1.1023,0.9972],\\&quot;FEV1_upper\\&quot;:[2.5,2.6312,2.583,2.5429,2.5086,2.4781,2.45,2.4236,2.398,2.3728,2.3477,2.3226,2.2971,2.2713,2.245,2.2181,2.5,2.7613,2.7387,2.7241,2.7153,2.7103,2.7078,2.7068,2.7068,2.7071,2.7076,2.7079,2.708,2.7077,2.7069,2.7055],\\&quot;Scenario\\&quot;:[\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;]}&quot;] 4.2.2 Mac OS You will need curl installed to use the API. To check if you have curl: brew list curl If you do not have curl, you can install it using HomeBrew: brew install curl curl -X POST -H &quot;Content-Type: application/json&quot; -d &#39;{&quot;api_key&quot;:[&quot;YOUR_API_KEY&quot;],&quot;func&quot;:[&quot;prism_model_run&quot;],&quot;model_input&quot;:[{&quot;ID&quot;:&quot;10001&quot;,&quot;male&quot;:1,&quot;age&quot;:70,&quot;smoker&quot;:1,&quot;FEV1&quot;:2.5,&quot;height&quot;:1.68,&quot;weight&quot;:65}]}&#39; http://prism.resp.core.ubc.ca/ocpu/library/fev1Prism/R/gateway/json #&gt; % Total % Received % Xferd Average Speed Time Time Time Current #&gt; Dload Upload Total Spent Left Speed #&gt; 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 100 1631 0 1486 100 145 2211 215 --:--:-- --:--:-- --:--:-- 2423 100 1631 0 1486 100 145 2211 215 --:--:-- --:--:-- --:--:-- 2423 #&gt; [&quot;{\\&quot;Year\\&quot;:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],\\&quot;FEV1\\&quot;:[2.5,2.3865,2.3192,2.251,2.1819,2.1119,2.0411,1.9694,1.8968,1.8233,1.7489,1.6737,1.5976,1.5206,1.4427,1.3639,2.5,2.5167,2.4749,2.4322,2.3886,2.3442,2.2988,2.2526,2.2056,2.1576,2.1088,2.059,2.0084,1.957,1.9046,1.8513],\\&quot;variance\\&quot;:[0,0.0156,0.0181,0.0222,0.0278,0.0349,0.0435,0.0537,0.0654,0.0786,0.0933,0.1096,0.1274,0.1467,0.1676,0.1899,0,0.0156,0.0181,0.0222,0.0278,0.0349,0.0435,0.0537,0.0654,0.0786,0.0933,0.1096,0.1274,0.1467,0.1676,0.1899],\\&quot;FEV1_lower\\&quot;:[2.5,2.1418,2.0553,1.959,1.8552,1.7458,1.6321,1.5152,1.3956,1.2738,1.1501,1.0248,0.898,0.7698,0.6404,0.5097,2.5,2.272,2.211,2.1402,2.0619,1.978,1.8899,1.7985,1.7044,1.6081,1.5099,1.4101,1.3088,1.2062,1.1023,0.9972],\\&quot;FEV1_upper\\&quot;:[2.5,2.6312,2.583,2.5429,2.5086,2.4781,2.45,2.4236,2.398,2.3728,2.3477,2.3226,2.2971,2.2713,2.245,2.2181,2.5,2.7613,2.7387,2.7241,2.7153,2.7103,2.7078,2.7068,2.7068,2.7071,2.7076,2.7079,2.708,2.7077,2.7069,2.7055],\\&quot;Scenario\\&quot;:[\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;]}&quot;] 4.2.3 Windows PowerShell In PowerShell: curl -Body &#39;{&quot;api_key&quot;:[&quot;YOUR_API_KEY&quot;],&quot;func&quot;:[&quot;prism_model_run&quot;],&quot;model_input&quot;:[{&quot;ID&quot;:&quot;10001&quot;,&quot;male&quot;:1,&quot;age&quot;:70,&quot;smoker&quot;:1,&quot;FEV1&quot;:2.5,&quot;height&quot;:1.68,&quot;weight&quot;:65}]}&#39; -Method POST -uri http://prism.resp.core.ubc.ca/ocpu/library/fev1Prism/R/gateway/json -Headers @{&quot;Content-type&quot;=&quot;application/json&quot;} #&gt; % Total % Received % Xferd Average Speed Time Time Time Current #&gt; Dload Upload Total Spent Left Speed #&gt; 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0 100 1631 0 1486 100 145 2125 207 --:--:-- --:--:-- --:--:-- 2333 #&gt; [&quot;{\\&quot;Year\\&quot;:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],\\&quot;FEV1\\&quot;:[2.5,2.3865,2.3192,2.251,2.1819,2.1119,2.0411,1.9694,1.8968,1.8233,1.7489,1.6737,1.5976,1.5206,1.4427,1.3639,2.5,2.5167,2.4749,2.4322,2.3886,2.3442,2.2988,2.2526,2.2056,2.1576,2.1088,2.059,2.0084,1.957,1.9046,1.8513],\\&quot;variance\\&quot;:[0,0.0156,0.0181,0.0222,0.0278,0.0349,0.0435,0.0537,0.0654,0.0786,0.0933,0.1096,0.1274,0.1467,0.1676,0.1899,0,0.0156,0.0181,0.0222,0.0278,0.0349,0.0435,0.0537,0.0654,0.0786,0.0933,0.1096,0.1274,0.1467,0.1676,0.1899],\\&quot;FEV1_lower\\&quot;:[2.5,2.1418,2.0553,1.959,1.8552,1.7458,1.6321,1.5152,1.3956,1.2738,1.1501,1.0248,0.898,0.7698,0.6404,0.5097,2.5,2.272,2.211,2.1402,2.0619,1.978,1.8899,1.7985,1.7044,1.6081,1.5099,1.4101,1.3088,1.2062,1.1023,0.9972],\\&quot;FEV1_upper\\&quot;:[2.5,2.6312,2.583,2.5429,2.5086,2.4781,2.45,2.4236,2.398,2.3728,2.3477,2.3226,2.2971,2.2713,2.245,2.2181,2.5,2.7613,2.7387,2.7241,2.7153,2.7103,2.7078,2.7068,2.7068,2.7071,2.7076,2.7079,2.708,2.7077,2.7069,2.7055],\\&quot;Scenario\\&quot;:[\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;Smoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;,\\&quot;QuitsSmoking\\&quot;]}&quot;] 4.3 Python API For this, we are assuming the use of Python 3. To get started, you will need to import the json and requests libraries. To install, open a terminal: pip3 install requests We will start with the GET request. If everything is working, this should return 200 as a response. import json import requests response = requests.get(&quot;http://prism.resp.core.ubc.ca/ocpu/library/fev1Prism/R/gateway/json&quot;) print(response) #&gt; &lt;Response [200]&gt; For the POST request, we will send some patient data to the API, and should get a prediction back from the API. api_key = &#39;YOUR_API_KEY&#39; patientInput = [{ &quot;ID&quot;:&quot;10001&quot;, &quot;male&quot;:1, &quot;age&quot;:70, &quot;smoker&quot;:1, &quot;FEV1&quot;:2.5, &quot;height&quot;:1.68, &quot;weight&quot;:65 }] response = requests.post(&quot;http://prism.resp.core.ubc.ca/ocpu/library/fev1Prism/R/gateway/json&quot;, json = {&quot;api_key&quot;:[api_key], &quot;func&quot;: [&quot;prism_model_run&quot;], &quot;model_input&quot;: patientInput}) print(response) results = json.loads(response.text) print(results) #&gt; &lt;Response [201]&gt; #&gt; [&#39;{&quot;Year&quot;:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],&quot;FEV1&quot;:[2.5,2.3865,2.3192,2.251,2.1819,2.1119,2.0411,1.9694,1.8968,1.8233,1.7489,1.6737,1.5976,1.5206,1.4427,1.3639,2.5,2.5167,2.4749,2.4322,2.3886,2.3442,2.2988,2.2526,2.2056,2.1576,2.1088,2.059,2.0084,1.957,1.9046,1.8513],&quot;variance&quot;:[0,0.0156,0.0181,0.0222,0.0278,0.0349,0.0435,0.0537,0.0654,0.0786,0.0933,0.1096,0.1274,0.1467,0.1676,0.1899,0,0.0156,0.0181,0.0222,0.0278,0.0349,0.0435,0.0537,0.0654,0.0786,0.0933,0.1096,0.1274,0.1467,0.1676,0.1899],&quot;FEV1_lower&quot;:[2.5,2.1418,2.0553,1.959,1.8552,1.7458,1.6321,1.5152,1.3956,1.2738,1.1501,1.0248,0.898,0.7698,0.6404,0.5097,2.5,2.272,2.211,2.1402,2.0619,1.978,1.8899,1.7985,1.7044,1.6081,1.5099,1.4101,1.3088,1.2062,1.1023,0.9972],&quot;FEV1_upper&quot;:[2.5,2.6312,2.583,2.5429,2.5086,2.4781,2.45,2.4236,2.398,2.3728,2.3477,2.3226,2.2971,2.2713,2.245,2.2181,2.5,2.7613,2.7387,2.7241,2.7153,2.7103,2.7078,2.7068,2.7068,2.7071,2.7076,2.7079,2.708,2.7077,2.7069,2.7055],&quot;Scenario&quot;:[&quot;Smoking&quot;,&quot;Smoking&quot;,&quot;Smoking&quot;,&quot;Smoking&quot;,&quot;Smoking&quot;,&quot;Smoking&quot;,&quot;Smoking&quot;,&quot;Smoking&quot;,&quot;Smoking&quot;,&quot;Smoking&quot;,&quot;Smoking&quot;,&quot;Smoking&quot;,&quot;Smoking&quot;,&quot;Smoking&quot;,&quot;Smoking&quot;,&quot;Smoking&quot;,&quot;QuitsSmoking&quot;,&quot;QuitsSmoking&quot;,&quot;QuitsSmoking&quot;,&quot;QuitsSmoking&quot;,&quot;QuitsSmoking&quot;,&quot;QuitsSmoking&quot;,&quot;QuitsSmoking&quot;,&quot;QuitsSmoking&quot;,&quot;QuitsSmoking&quot;,&quot;QuitsSmoking&quot;,&quot;QuitsSmoking&quot;,&quot;QuitsSmoking&quot;,&quot;QuitsSmoking&quot;,&quot;QuitsSmoking&quot;,&quot;QuitsSmoking&quot;,&quot;QuitsSmoking&quot;]}&#39;] We will put the results in a dictionary: resultsDict = json.loads(results[0]) print(resultsDict) #&gt; {&#39;Year&#39;: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], &#39;FEV1&#39;: [2.5, 2.3865, 2.3192, 2.251, 2.1819, 2.1119, 2.0411, 1.9694, 1.8968, 1.8233, 1.7489, 1.6737, 1.5976, 1.5206, 1.4427, 1.3639, 2.5, 2.5167, 2.4749, 2.4322, 2.3886, 2.3442, 2.2988, 2.2526, 2.2056, 2.1576, 2.1088, 2.059, 2.0084, 1.957, 1.9046, 1.8513], &#39;variance&#39;: [0, 0.0156, 0.0181, 0.0222, 0.0278, 0.0349, 0.0435, 0.0537, 0.0654, 0.0786, 0.0933, 0.1096, 0.1274, 0.1467, 0.1676, 0.1899, 0, 0.0156, 0.0181, 0.0222, 0.0278, 0.0349, 0.0435, 0.0537, 0.0654, 0.0786, 0.0933, 0.1096, 0.1274, 0.1467, 0.1676, 0.1899], &#39;FEV1_lower&#39;: [2.5, 2.1418, 2.0553, 1.959, 1.8552, 1.7458, 1.6321, 1.5152, 1.3956, 1.2738, 1.1501, 1.0248, 0.898, 0.7698, 0.6404, 0.5097, 2.5, 2.272, 2.211, 2.1402, 2.0619, 1.978, 1.8899, 1.7985, 1.7044, 1.6081, 1.5099, 1.4101, 1.3088, 1.2062, 1.1023, 0.9972], &#39;FEV1_upper&#39;: [2.5, 2.6312, 2.583, 2.5429, 2.5086, 2.4781, 2.45, 2.4236, 2.398, 2.3728, 2.3477, 2.3226, 2.2971, 2.2713, 2.245, 2.2181, 2.5, 2.7613, 2.7387, 2.7241, 2.7153, 2.7103, 2.7078, 2.7068, 2.7068, 2.7071, 2.7076, 2.7079, 2.708, 2.7077, 2.7069, 2.7055], &#39;Scenario&#39;: [&#39;Smoking&#39;, &#39;Smoking&#39;, &#39;Smoking&#39;, &#39;Smoking&#39;, &#39;Smoking&#39;, &#39;Smoking&#39;, &#39;Smoking&#39;, &#39;Smoking&#39;, &#39;Smoking&#39;, &#39;Smoking&#39;, &#39;Smoking&#39;, &#39;Smoking&#39;, &#39;Smoking&#39;, &#39;Smoking&#39;, &#39;Smoking&#39;, &#39;Smoking&#39;, &#39;QuitsSmoking&#39;, &#39;QuitsSmoking&#39;, &#39;QuitsSmoking&#39;, &#39;QuitsSmoking&#39;, &#39;QuitsSmoking&#39;, &#39;QuitsSmoking&#39;, &#39;QuitsSmoking&#39;, &#39;QuitsSmoking&#39;, &#39;QuitsSmoking&#39;, &#39;QuitsSmoking&#39;, &#39;QuitsSmoking&#39;, &#39;QuitsSmoking&#39;, &#39;QuitsSmoking&#39;, &#39;QuitsSmoking&#39;, &#39;QuitsSmoking&#39;, &#39;QuitsSmoking&#39;]} columnNames = list(resultsDict.keys()) print(columnNames) #&gt; [&#39;Year&#39;, &#39;FEV1&#39;, &#39;variance&#39;, &#39;FEV1_lower&#39;, &#39;FEV1_upper&#39;, &#39;Scenario&#39;] To visualize the results using the package PrettyTable: from prettytable import PrettyTable table = PrettyTable() table = PrettyTable() table.align[&quot;Year&quot;] = &quot;l&quot; # Left align year table.padding_width = 1 # One space between column edges and contents (default) print(columnNames) #&gt; [&#39;Year&#39;, &#39;FEV1&#39;, &#39;variance&#39;, &#39;FEV1_lower&#39;, &#39;FEV1_upper&#39;, &#39;Scenario&#39;] for col in columnNames: table.add_column(col, resultsDict[col]) print(table) #&gt; +------+--------+----------+------------+------------+--------------+ #&gt; | Year | FEV1 | variance | FEV1_lower | FEV1_upper | Scenario | #&gt; +------+--------+----------+------------+------------+--------------+ #&gt; | 0 | 2.5 | 0 | 2.5 | 2.5 | Smoking | #&gt; | 1 | 2.3865 | 0.0156 | 2.1418 | 2.6312 | Smoking | #&gt; | 2 | 2.3192 | 0.0181 | 2.0553 | 2.583 | Smoking | #&gt; | 3 | 2.251 | 0.0222 | 1.959 | 2.5429 | Smoking | #&gt; | 4 | 2.1819 | 0.0278 | 1.8552 | 2.5086 | Smoking | #&gt; | 5 | 2.1119 | 0.0349 | 1.7458 | 2.4781 | Smoking | #&gt; | 6 | 2.0411 | 0.0435 | 1.6321 | 2.45 | Smoking | #&gt; | 7 | 1.9694 | 0.0537 | 1.5152 | 2.4236 | Smoking | #&gt; | 8 | 1.8968 | 0.0654 | 1.3956 | 2.398 | Smoking | #&gt; | 9 | 1.8233 | 0.0786 | 1.2738 | 2.3728 | Smoking | #&gt; | 10 | 1.7489 | 0.0933 | 1.1501 | 2.3477 | Smoking | #&gt; | 11 | 1.6737 | 0.1096 | 1.0248 | 2.3226 | Smoking | #&gt; | 12 | 1.5976 | 0.1274 | 0.898 | 2.2971 | Smoking | #&gt; | 13 | 1.5206 | 0.1467 | 0.7698 | 2.2713 | Smoking | #&gt; | 14 | 1.4427 | 0.1676 | 0.6404 | 2.245 | Smoking | #&gt; | 15 | 1.3639 | 0.1899 | 0.5097 | 2.2181 | Smoking | #&gt; | 0 | 2.5 | 0 | 2.5 | 2.5 | QuitsSmoking | #&gt; | 1 | 2.5167 | 0.0156 | 2.272 | 2.7613 | QuitsSmoking | #&gt; | 2 | 2.4749 | 0.0181 | 2.211 | 2.7387 | QuitsSmoking | #&gt; | 3 | 2.4322 | 0.0222 | 2.1402 | 2.7241 | QuitsSmoking | #&gt; | 4 | 2.3886 | 0.0278 | 2.0619 | 2.7153 | QuitsSmoking | #&gt; | 5 | 2.3442 | 0.0349 | 1.978 | 2.7103 | QuitsSmoking | #&gt; | 6 | 2.2988 | 0.0435 | 1.8899 | 2.7078 | QuitsSmoking | #&gt; | 7 | 2.2526 | 0.0537 | 1.7985 | 2.7068 | QuitsSmoking | #&gt; | 8 | 2.2056 | 0.0654 | 1.7044 | 2.7068 | QuitsSmoking | #&gt; | 9 | 2.1576 | 0.0786 | 1.6081 | 2.7071 | QuitsSmoking | #&gt; | 10 | 2.1088 | 0.0933 | 1.5099 | 2.7076 | QuitsSmoking | #&gt; | 11 | 2.059 | 0.1096 | 1.4101 | 2.7079 | QuitsSmoking | #&gt; | 12 | 2.0084 | 0.1274 | 1.3088 | 2.708 | QuitsSmoking | #&gt; | 13 | 1.957 | 0.1467 | 1.2062 | 2.7077 | QuitsSmoking | #&gt; | 14 | 1.9046 | 0.1676 | 1.1023 | 2.7069 | QuitsSmoking | #&gt; | 15 | 1.8513 | 0.1899 | 0.9972 | 2.7055 | QuitsSmoking | #&gt; +------+--------+----------+------------+------------+--------------+ 4.4 Javascript API To use the PRISM API in Javascript, you will need to use the XMLHttpRequest module. We will start by sending a GET request: request = new XMLHttpRequest(); request.open(&#39;GET&#39;, &#39;http://prism.resp.core.ubc.ca/ocpu/library/fev1Prism/R/gateway/json&#39;); request.send(); The onreadystatechange is an XMLHttpRequest event which updates when the ready state changes. The ready state can be either 1, 2, 3, or 4. #&gt; null device #&gt; 1 Ready State Description 0 Unsent 1 Opened: open() has been called 2 Headers Received: send() has been called and headers are available 3 Loading: downloading; responseText holds partial data 4 Done: the operation is complete request.onreadystatechange = function() { if(request.readyState === 4) { // if(request.status === 200) { console.log(request.responseText); } else { console.log(request.status); } } } To get a prediction, we can send a POST request. We will first create an example patient using json: let patient = JSON.stringify({ api_key: 123456, func: [&quot;prism_model_run&quot;], model_input: [{ ID: 10001, male: 1, age: 70, smoker: 1, FEV1: 2.5, height: 1.68, weight: 65 }] }); We need to set the request header to json, and then send our patient json to the PRISM server using the request.send() function. request.open(&#39;POST&#39;, &#39;http://prism.resp.core.ubc.ca/ocpu/library/fev1Prism/R/gateway/json&#39;); request.setRequestHeader(&#39;Content-Type&#39;, &#39;application/json&#39;); request.send(patient); // Send request let results = request.response; "],
["section-webapp.html", "5 Using the Web Application", " 5 Using the Web Application We have created a web application which can be found here: FEV1 Prediction App "],
["section-appendix1.html", "6 Appendix 1: Installing R 6.1 Step 1: Mirrors 6.2 Mac OS X 6.3 Windows", " 6 Appendix 1: Installing R This is a guide to installing R, geared mainly at beginner audiences. All the information below can be found at https://www.r-project.org/; I’ve just simplified it a bit. 6.1 Step 1: Mirrors When you go the the R home page, you will see a link to download R, which will take you to a list of mirrors. They are organized by country, so click on one that is close to your location. Since our group is based out of Vancouver, I will select one of the mirrors in Canada: SFU Mirror. Once you have clicked on the closest mirror, you will be asked to choose what type of computer you have. 6.2 Mac OS X If you are using a Mac (Apple) computer, click on the link for Mac OS X. You will be redirected to a page that says “R for Mac OS X.” To install R, you want to click on one of the files ending in “.pkg”. If your operating system is fairly up-to-date, scroll to “Latest Release” and click on the file that looks like “R-3.X.Y.pkg,” with X and Y being numbers for the latest release. R should begin downloading, and your Mac package manager will pop up with the rest of the instructions. If your operating system is older, you might want to scroll down to “Legacy Releases,” and download one of those “.pkg” files instead. It should tell you on the page what version your computer should use. 6.3 Windows If you are using Windows, click on the link for Windows. You will be redirected to a page that says “R for Windows.” To install R, click on the link “base,” and on the next page, “Download R 3.X.Y for Windows,” where X and Y are the version numbers for the latest release. R should begin downloading. "]
]
